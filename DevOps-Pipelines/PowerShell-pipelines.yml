trigger:
  branches:
    include:
      - master
      - main
  paths:
    exclude:
      - README.md

pool:
  vmImage: "windows-latest"

variables:
  - group: General-build-variable

stages:
  - stage: Test
    jobs:
      - job: TestJob
        steps:
          - task: PowerShell@2
            displayName: Install InvokeBuild module on the build agent
            inputs:
              targetType: "inline"
              pwsh: true
              script: |
                if (-not (Get-Module -Name InvokeBuild -ListAvailable)) {
                  Install-Module InvokeBuild -Force
                }
                Import-Module InvokeBuild

          - task: PowerShell@2
            displayName: Analyze code with PSScriptAnalyzer
            inputs:
              targetType: "inline"
              pwsh: true
              failOnStderr: false
              script: Invoke-Build -Task Analyze -ModuleName $(module.Name)
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: PowerShell@2
            displayName: Test code with Pester tests
            inputs:
              targetType: "inline"
              pwsh: true
              failOnStderr: false
              script: Invoke-Build -Task Test -ModuleName $(module.Name)
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: PowerShell@2
            displayName: Start checking ARM files for ARM-TTK
            inputs:
              targetType: "inline"
              pwsh: true
              failOnStderr: false
              script: Invoke-Build -Task TestARMTTK -ModuleName $(module.Name)
              workingDirectory: $(System.DefaultWorkingDirectory)
    
          - task: PowerShell@2
            displayName: Start checking ARM files for AzSKARMTemplateSecurity
            inputs:
              targetType: "inline"
              pwsh: true
              failOnStderr: false
              script: Invoke-Build -Task TestARMAZSK -ModuleName $(module.Name)
              workingDirectory: $(System.DefaultWorkingDirectory)
  
          - task: PublishTestResults@2
            displayName: Publish test results
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "NUnit"
              mergeTestResults: true
              testResultsFiles: '$(System.DefaultWorkingDirectory)\Results\TEST-*.xml'
              failTaskOnFailedTests: true

          - task: PowerShell@2
            displayName: Verify code coverage
            inputs:
              targetType: "inline"
              pwsh: true
              failOnStderr: true
              script: Invoke-Build -Task CodeCoverage -ModuleName $(module.Name)
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: PublishCodeCoverageResults@1
            displayName: Publish code coverage results
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: "JaCoCo"
              summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/CodeCoverageResults*.xml"
              pathToSources: "$(System.DefaultWorkingDirectory)/$(module.Name)/"
              failIfCoverageEmpty: true
 
          
  - stage: Build
    condition: succeeded()
    jobs:
      - job: BuildJob
        steps:
          - task: PowerShell@2
            displayName: Install InvokeBuild module on the build agent
            inputs:
              targetType: "inline"
              pwsh: true
              script: |
                if (-not (Get-Module -Name InvokeBuild -ListAvailable)) {
                  Install-Module InvokeBuild -Force
                }
                Import-Module InvokeBuild

          - task: PowerShell@2
            displayName: Build PowerShell module
            inputs:
              targetType: "inline"
              pwsh: true
              failOnStderr: false
              script: Invoke-Build -Task Build -Configuration Release -Sourcelocation $(module.SourceLocation) -ModuleName $(module.Name) -ADOPat $(System.AccessToken) -acceptableCodeCoveragePercent $(module.acceptableCodeCoveragePercent) -MajorVersionNumber $(module.MajorVersionNumber)
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: NuGetCommand@2
            displayName: Create a NuGet package
            inputs:
              command: "pack"
              packagesToPack: "$(System.DefaultWorkingDirectory)/build/**/*.nuspec"
              packDestination: "$(Build.ArtifactStagingDirectory)"

          - task: PublishBuildArtifacts@1
            displayName: Publish build artifact
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "$(module.Name)"
              publishLocation: Container
          
          - task: PowerShell@2
            displayName: Building Markdown Help Files
            inputs:
              targetType: "inline"
              pwsh: true
              failOnStderr: true
              script: Invoke-Build -Task BuildingHelpFiles -ModuleName $(module.Name)
              workingDirectory: $(System.DefaultWorkingDirectory)
          
          - task: PublishBuildArtifacts@1
            displayName: Publish Markdown files
            inputs:
              PathtoPublish: 'D:\a\1\s\build\Help'
              ArtifactName: 'help'
              publishLocation: 'Container'

  - stage: Publish
    condition: succeeded()
    jobs:
      - job: PublishJob
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: Download Build Artifacts
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: '$(module.Name)'
            itemPattern: '**/*.nupkg'
            downloadPath: '$(Pipeline.Workspace)'

        - task: NuGetCommand@2
          displayName: Publish module to NuGet feed
          inputs:
            command: "push"
            packagesToPush: "$(Pipeline.Workspace)/**/*.nupkg"
            nuGetFeedType: "internal"
            publishVstsFeed: "$(module.FeedName)"
